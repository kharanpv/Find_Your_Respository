{"ast":null,"code":"// runSearch.js\n\nimport { Octokit } from \"octokit\";\nconst authKey = \"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\";\nconst octokit = new Octokit({\n  auth: authKey // Use the read key as the authentication token\n});\n\nasync function getResults(query, owner, stars, lastUpdated, selectedLanguages) {\n  try {\n    // Define the base query string\n    let queryString = `/search/repositories?q=`;\n\n    // Add the 'query' parameter if it's not empty\n    if (query) {\n      queryString += `${query}+`;\n    }\n\n    // Add the 'user' parameter if it's not empty\n    if (owner) {\n      queryString += `user:${owner}+`;\n    }\n\n    // Add the 'stars' and 'updated' parameters if they are not empty\n    if (stars) {\n      queryString += `stars:>${stars}+`;\n    }\n    if (lastUpdated) {\n      queryString += `updated:>${lastUpdated}+`;\n    }\n\n    // Add language filters for each selected language\n    if (selectedLanguages.length > 0) {\n      const languageFilters = selectedLanguages.map(language => `+language:${language}`).join('');\n      queryString += languageFilters;\n    }\n\n    // Remove the trailing '+' character if it exists\n    if (queryString.endsWith('+')) {\n      queryString = queryString.slice(0, -1);\n    }\n\n    // Use the queryString in your GET request\n    let response = await octokit.request(`GET ${queryString}`, {\n      per_page: 10\n    });\n    // Create the responses directory if it doesn't exist\n    if (!localStorage.responses) {\n      localStorage.responses = JSON.stringify([response]);\n    } else {\n      // else, append\n      const responses = JSON.parse(localStorage.responses);\n      responses.push(response);\n      localStorage.responses = JSON.stringify(responses);\n    }\n  } catch (error) {\n    if (error.response) console.error(`Error: ${error.response.status}\\n Message: ${error.response.data.message}`);else console.error(error);\n  }\n}\nexport function runSearch(selectedLanguages) {\n  const query = document.getElementById(\"query\");\n  const owner = document.getElementById(\"owner\");\n  const stars = document.getElementById(\"stars\");\n  const lastUpdated = document.getElementById(\"last-updated\");\n  getResults(query, owner, stars, lastUpdated, selectedLanguages);\n  alert(alertMessage);\n}","map":{"version":3,"names":["Octokit","authKey","octokit","auth","getResults","query","owner","stars","lastUpdated","selectedLanguages","queryString","length","languageFilters","map","language","join","endsWith","slice","response","request","per_page","localStorage","responses","JSON","stringify","parse","push","error","console","status","data","message","runSearch","document","getElementById","alert","alertMessage"],"sources":["C:/Users/Prateek/Desktop/College_Stuff/Fall_2023_Co-op_Semester/MakeUC/Find_your_repository/repo_finder/src/utils/runSearch.js"],"sourcesContent":["// runSearch.js\r\n\r\nimport { Octokit } from \"octokit\";\r\n\r\nconst authKey = \"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\"\r\n\r\nconst octokit = new Octokit({\r\n    auth: authKey, // Use the read key as the authentication token\r\n});\r\n\r\nasync function getResults(query, owner, stars, lastUpdated, selectedLanguages) {\r\n\r\n    try {\r\n        // Define the base query string\r\n        let queryString = `/search/repositories?q=`;\r\n\r\n        // Add the 'query' parameter if it's not empty\r\n        if (query) {\r\n            queryString += `${query}+`;\r\n        }\r\n\r\n        // Add the 'user' parameter if it's not empty\r\n        if (owner) {\r\n            queryString += `user:${owner}+`;\r\n        }\r\n\r\n        // Add the 'stars' and 'updated' parameters if they are not empty\r\n        if (stars) {\r\n            queryString += `stars:>${stars}+`;\r\n        }\r\n        if (lastUpdated) {\r\n            queryString += `updated:>${lastUpdated}+`;\r\n        }\r\n\r\n        // Add language filters for each selected language\r\n        if (selectedLanguages.length > 0) {\r\n            const languageFilters = selectedLanguages.map(language => `+language:${language}`).join('');\r\n            queryString += languageFilters;\r\n        }\r\n\r\n        // Remove the trailing '+' character if it exists\r\n        if (queryString.endsWith('+')) {\r\n            queryString = queryString.slice(0, -1);\r\n        }\r\n\r\n        // Use the queryString in your GET request\r\n        let response = await octokit.request(`GET ${queryString}`, {\r\n            per_page: 10,\r\n        });\r\n        // Create the responses directory if it doesn't exist\r\n        if (!localStorage.responses) {\r\n            localStorage.responses = JSON.stringify([response]);\r\n\r\n        } else { // else, append\r\n            const responses = JSON.parse(localStorage.responses);\r\n            responses.push(response);\r\n            localStorage.responses = JSON.stringify(responses);\r\n        }\r\n\r\n    } catch (error) {\r\n        if (error.response)\r\n            console.error(`Error: ${error.response.status}\\n Message: ${error.response.data.message}`)\r\n        else console.error(error)\r\n    }\r\n}\r\n\r\nexport function runSearch(selectedLanguages) {\r\n    const query = document.getElementById(\"query\");\r\n    const owner = document.getElementById(\"owner\");\r\n    const stars = document.getElementById(\"stars\");\r\n    const lastUpdated = document.getElementById(\"last-updated\");\r\n\r\n    getResults(query, owner, stars, lastUpdated, selectedLanguages);\r\n  \r\n    alert(alertMessage);\r\n  }\r\n"],"mappings":"AAAA;;AAEA,SAASA,OAAO,QAAQ,SAAS;AAEjC,MAAMC,OAAO,GAAG,0CAA0C;AAE1D,MAAMC,OAAO,GAAG,IAAIF,OAAO,CAAC;EACxBG,IAAI,EAAEF,OAAO,CAAE;AACnB,CAAC,CAAC;;AAEF,eAAeG,UAAUA,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,WAAW,EAAEC,iBAAiB,EAAE;EAE3E,IAAI;IACA;IACA,IAAIC,WAAW,GAAI,yBAAwB;;IAE3C;IACA,IAAIL,KAAK,EAAE;MACPK,WAAW,IAAK,GAAEL,KAAM,GAAE;IAC9B;;IAEA;IACA,IAAIC,KAAK,EAAE;MACPI,WAAW,IAAK,QAAOJ,KAAM,GAAE;IACnC;;IAEA;IACA,IAAIC,KAAK,EAAE;MACPG,WAAW,IAAK,UAASH,KAAM,GAAE;IACrC;IACA,IAAIC,WAAW,EAAE;MACbE,WAAW,IAAK,YAAWF,WAAY,GAAE;IAC7C;;IAEA;IACA,IAAIC,iBAAiB,CAACE,MAAM,GAAG,CAAC,EAAE;MAC9B,MAAMC,eAAe,GAAGH,iBAAiB,CAACI,GAAG,CAACC,QAAQ,IAAK,aAAYA,QAAS,EAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;MAC3FL,WAAW,IAAIE,eAAe;IAClC;;IAEA;IACA,IAAIF,WAAW,CAACM,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC3BN,WAAW,GAAGA,WAAW,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C;;IAEA;IACA,IAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,OAAO,CAAE,OAAMT,WAAY,EAAC,EAAE;MACvDU,QAAQ,EAAE;IACd,CAAC,CAAC;IACF;IACA,IAAI,CAACC,YAAY,CAACC,SAAS,EAAE;MACzBD,YAAY,CAACC,SAAS,GAAGC,IAAI,CAACC,SAAS,CAAC,CAACN,QAAQ,CAAC,CAAC;IAEvD,CAAC,MAAM;MAAE;MACL,MAAMI,SAAS,GAAGC,IAAI,CAACE,KAAK,CAACJ,YAAY,CAACC,SAAS,CAAC;MACpDA,SAAS,CAACI,IAAI,CAACR,QAAQ,CAAC;MACxBG,YAAY,CAACC,SAAS,GAAGC,IAAI,CAACC,SAAS,CAACF,SAAS,CAAC;IACtD;EAEJ,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZ,IAAIA,KAAK,CAACT,QAAQ,EACdU,OAAO,CAACD,KAAK,CAAE,UAASA,KAAK,CAACT,QAAQ,CAACW,MAAO,eAAcF,KAAK,CAACT,QAAQ,CAACY,IAAI,CAACC,OAAQ,EAAC,CAAC,MACzFH,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EAC7B;AACJ;AAEA,OAAO,SAASK,SAASA,CAACvB,iBAAiB,EAAE;EACzC,MAAMJ,KAAK,GAAG4B,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;EAC9C,MAAM5B,KAAK,GAAG2B,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;EAC9C,MAAM3B,KAAK,GAAG0B,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;EAC9C,MAAM1B,WAAW,GAAGyB,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC;EAE3D9B,UAAU,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,WAAW,EAAEC,iBAAiB,CAAC;EAE/D0B,KAAK,CAACC,YAAY,CAAC;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}