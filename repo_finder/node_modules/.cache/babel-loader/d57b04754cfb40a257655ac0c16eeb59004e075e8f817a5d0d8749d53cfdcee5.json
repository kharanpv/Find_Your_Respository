{"ast":null,"code":"// runSearch.js\n\nimport { Octokit } from \"octokit\";\nconst authKey = \"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\";\nconst octokit = new Octokit({\n  auth: authKey // Use the read key as the authentication token\n});\n\nasync function getResults(query, owner, stars, lastUpdated, selectedLanguages) {\n  try {\n    const languageFilters = selectedLanguages.map(language => `+language:${language}`).join(''); // join the languages with a plus sign\n    // try to get response for request to search\n    let response = await octokit.request(`GET /search/repositories?q={query}+user={user}+updated:>{lastUpdated}+stars:>{stars}${languageFilters}`, {\n      query: query,\n      owner: owner,\n      stars: stars,\n      lastUpdated: lastUpdated,\n      per_page: 10\n    });\n\n    // Create the responses directory if it doesn't exist\n    if (!localStorage.responses) {\n      localStorage.responses = JSON.stringify([response]);\n    } else {\n      // else, append\n      const responses = JSON.parse(localStorage.responses);\n      responses.push(response);\n      localStorage.responses = JSON.stringify(responses);\n    }\n  } catch (error) {\n    if (error.response) console.error(`Error: ${error.response.status}\\n Message: ${error.response.data.message}`);else console.error(error);\n  }\n}\nexport function runSearch(selectedLanguages) {\n  const query = document.getElementById(\"query\");\n  const owner = document.getElementById(\"owner\");\n  const stars = document.getElementById(\"stars\");\n  const lastUpdated = document.getElementById(\"last-updated\");\n  getResults(query, owner, stars, lastUpdated, selectedLanguages);\n  alert(alertMessage);\n}","map":{"version":3,"names":["Octokit","authKey","octokit","auth","getResults","query","owner","stars","lastUpdated","selectedLanguages","languageFilters","map","language","join","response","request","per_page","localStorage","responses","JSON","stringify","parse","push","error","console","status","data","message","runSearch","document","getElementById","alert","alertMessage"],"sources":["C:/Users/Prateek/Desktop/College_Stuff/Fall_2023_Co-op_Semester/MakeUC/Find_your_repository/repo_finder/src/utils/runSearch.js"],"sourcesContent":["// runSearch.js\r\n\r\nimport { Octokit } from \"octokit\";\r\n\r\nconst authKey = \"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\"\r\n\r\nconst octokit = new Octokit({\r\n    auth: authKey, // Use the read key as the authentication token\r\n});\r\n\r\nasync function getResults(query, owner, stars, lastUpdated, selectedLanguages) {\r\n\r\n    try {\r\n        const languageFilters = selectedLanguages.map(language => `+language:${language}`).join(''); // join the languages with a plus sign\r\n        // try to get response for request to search\r\n        let response = await octokit.request(`GET /search/repositories?q={query}+user={user}+updated:>{lastUpdated}+stars:>{stars}${languageFilters}`, {\r\n            query: query,\r\n            owner: owner,\r\n            stars: stars,\r\n            lastUpdated: lastUpdated,\r\n            per_page: 10,\r\n        })\r\n\r\n        // Create the responses directory if it doesn't exist\r\n        if (!localStorage.responses) {\r\n            localStorage.responses = JSON.stringify([response]);\r\n\r\n        } else { // else, append\r\n            const responses = JSON.parse(localStorage.responses);\r\n            responses.push(response);\r\n            localStorage.responses = JSON.stringify(responses);\r\n        }\r\n\r\n    } catch (error) {\r\n        if (error.response)\r\n            console.error(`Error: ${error.response.status}\\n Message: ${error.response.data.message}`)\r\n        else console.error(error)\r\n    }\r\n}\r\n\r\nexport function runSearch(selectedLanguages) {\r\n    const query = document.getElementById(\"query\");\r\n    const owner = document.getElementById(\"owner\");\r\n    const stars = document.getElementById(\"stars\");\r\n    const lastUpdated = document.getElementById(\"last-updated\");\r\n\r\n    getResults(query, owner, stars, lastUpdated, selectedLanguages);\r\n  \r\n    alert(alertMessage);\r\n  }\r\n"],"mappings":"AAAA;;AAEA,SAASA,OAAO,QAAQ,SAAS;AAEjC,MAAMC,OAAO,GAAG,0CAA0C;AAE1D,MAAMC,OAAO,GAAG,IAAIF,OAAO,CAAC;EACxBG,IAAI,EAAEF,OAAO,CAAE;AACnB,CAAC,CAAC;;AAEF,eAAeG,UAAUA,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,WAAW,EAAEC,iBAAiB,EAAE;EAE3E,IAAI;IACA,MAAMC,eAAe,GAAGD,iBAAiB,CAACE,GAAG,CAACC,QAAQ,IAAK,aAAYA,QAAS,EAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7F;IACA,IAAIC,QAAQ,GAAG,MAAMZ,OAAO,CAACa,OAAO,CAAE,uFAAsFL,eAAgB,EAAC,EAAE;MAC3IL,KAAK,EAAEA,KAAK;MACZC,KAAK,EAAEA,KAAK;MACZC,KAAK,EAAEA,KAAK;MACZC,WAAW,EAAEA,WAAW;MACxBQ,QAAQ,EAAE;IACd,CAAC,CAAC;;IAEF;IACA,IAAI,CAACC,YAAY,CAACC,SAAS,EAAE;MACzBD,YAAY,CAACC,SAAS,GAAGC,IAAI,CAACC,SAAS,CAAC,CAACN,QAAQ,CAAC,CAAC;IAEvD,CAAC,MAAM;MAAE;MACL,MAAMI,SAAS,GAAGC,IAAI,CAACE,KAAK,CAACJ,YAAY,CAACC,SAAS,CAAC;MACpDA,SAAS,CAACI,IAAI,CAACR,QAAQ,CAAC;MACxBG,YAAY,CAACC,SAAS,GAAGC,IAAI,CAACC,SAAS,CAACF,SAAS,CAAC;IACtD;EAEJ,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZ,IAAIA,KAAK,CAACT,QAAQ,EACdU,OAAO,CAACD,KAAK,CAAE,UAASA,KAAK,CAACT,QAAQ,CAACW,MAAO,eAAcF,KAAK,CAACT,QAAQ,CAACY,IAAI,CAACC,OAAQ,EAAC,CAAC,MACzFH,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EAC7B;AACJ;AAEA,OAAO,SAASK,SAASA,CAACnB,iBAAiB,EAAE;EACzC,MAAMJ,KAAK,GAAGwB,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;EAC9C,MAAMxB,KAAK,GAAGuB,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;EAC9C,MAAMvB,KAAK,GAAGsB,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;EAC9C,MAAMtB,WAAW,GAAGqB,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC;EAE3D1B,UAAU,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,WAAW,EAAEC,iBAAiB,CAAC;EAE/DsB,KAAK,CAACC,YAAY,CAAC;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}