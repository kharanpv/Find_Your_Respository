{"ast":null,"code":"// runSearch.js\n\nimport { Octokit } from \"octokit\";\nconst authKey = \"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\";\nconst octokit = new Octokit({\n  auth: authKey // Use the read key as the authentication token\n});\n\nasync function getResults() {\n  while (start_date < current_date) {\n    try {\n      // try to get response for request to search\n      let response = await octokit.request(\"GET /search/repositories?q={query}+language:{language}+created:{from_date}..{to_date}\", {\n        query: \"ARM\",\n        language: \"Assembly\",\n        per_page: 10\n      });\n\n      // Create the responses directory if it doesn't exist\n      if (!localStorage.responses) {\n        localStorage.responses = JSON.stringify([response]);\n      } else {\n        // else, append\n        const responses = JSON.parse(localStorage.responses);\n        responses.push(response);\n        localStorage.responses = JSON.stringify(responses);\n      }\n    } catch (error) {\n      if (error.response) console.error(`Error: ${error.response.status}\\n Message: ${error.response.data.message}`);else console.error(error);\n    }\n    // Add 1 month to the start date\n    start_date.setFullYear(start_date.getFullYear() + 1);\n  }\n}\nexport function runSearch() {\n  const keywordsInput = document.getElementById(\"keywords\");\n  if (keywordsInput) {\n    const keywords = keywordsInput.value;\n    alert(`${keywords}`);\n  } else {\n    alert(\"Search executed!\");\n  }\n}","map":{"version":3,"names":["Octokit","authKey","octokit","auth","getResults","start_date","current_date","response","request","query","language","per_page","localStorage","responses","JSON","stringify","parse","push","error","console","status","data","message","setFullYear","getFullYear","runSearch","keywordsInput","document","getElementById","keywords","value","alert"],"sources":["C:/Users/Prateek/Desktop/College_Stuff/Fall_2023_Co-op_Semester/MakeUC/Find_your_repository/repo_finder/src/utils/runSearch.js"],"sourcesContent":["// runSearch.js\r\n\r\nimport { Octokit } from \"octokit\";\r\n\r\nconst authKey = \"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\"\r\n\r\nconst octokit = new Octokit({\r\n    auth: authKey, // Use the read key as the authentication token\r\n});\r\n\r\nasync function getResults() {\r\n\r\n    while ( start_date < current_date) {\r\n\r\n        try {\r\n            // try to get response for request to search\r\n            let response = await octokit.request(\"GET /search/repositories?q={query}+language:{language}+created:{from_date}..{to_date}\", {\r\n                query: \"ARM\",\r\n                language: \"Assembly\",\r\n                per_page: 10,\r\n            })\r\n\r\n            // Create the responses directory if it doesn't exist\r\n            if (!localStorage.responses) {\r\n                localStorage.responses = JSON.stringify([response]);\r\n\r\n            } else { // else, append\r\n                const responses = JSON.parse(localStorage.responses);\r\n                responses.push(response);\r\n                localStorage.responses = JSON.stringify(responses);\r\n            }\r\n\r\n        } catch (error) {\r\n            if (error.response)\r\n                console.error(`Error: ${error.response.status}\\n Message: ${error.response.data.message}`)\r\n            else console.error(error)\r\n        }\r\n        // Add 1 month to the start date\r\n        start_date.setFullYear(start_date.getFullYear() + 1);\r\n    }\r\n}\r\n\r\nexport function runSearch() {\r\n  const keywordsInput = document.getElementById(\"keywords\");\r\n  if (keywordsInput) {\r\n    const keywords = keywordsInput.value;\r\n    alert(`${keywords}`);\r\n  } else {\r\n    alert(\"Search executed!\");\r\n  }\r\n}"],"mappings":"AAAA;;AAEA,SAASA,OAAO,QAAQ,SAAS;AAEjC,MAAMC,OAAO,GAAG,0CAA0C;AAE1D,MAAMC,OAAO,GAAG,IAAIF,OAAO,CAAC;EACxBG,IAAI,EAAEF,OAAO,CAAE;AACnB,CAAC,CAAC;;AAEF,eAAeG,UAAUA,CAAA,EAAG;EAExB,OAAQC,UAAU,GAAGC,YAAY,EAAE;IAE/B,IAAI;MACA;MACA,IAAIC,QAAQ,GAAG,MAAML,OAAO,CAACM,OAAO,CAAC,uFAAuF,EAAE;QAC1HC,KAAK,EAAE,KAAK;QACZC,QAAQ,EAAE,UAAU;QACpBC,QAAQ,EAAE;MACd,CAAC,CAAC;;MAEF;MACA,IAAI,CAACC,YAAY,CAACC,SAAS,EAAE;QACzBD,YAAY,CAACC,SAAS,GAAGC,IAAI,CAACC,SAAS,CAAC,CAACR,QAAQ,CAAC,CAAC;MAEvD,CAAC,MAAM;QAAE;QACL,MAAMM,SAAS,GAAGC,IAAI,CAACE,KAAK,CAACJ,YAAY,CAACC,SAAS,CAAC;QACpDA,SAAS,CAACI,IAAI,CAACV,QAAQ,CAAC;QACxBK,YAAY,CAACC,SAAS,GAAGC,IAAI,CAACC,SAAS,CAACF,SAAS,CAAC;MACtD;IAEJ,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZ,IAAIA,KAAK,CAACX,QAAQ,EACdY,OAAO,CAACD,KAAK,CAAE,UAASA,KAAK,CAACX,QAAQ,CAACa,MAAO,eAAcF,KAAK,CAACX,QAAQ,CAACc,IAAI,CAACC,OAAQ,EAAC,CAAC,MACzFH,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IAC7B;IACA;IACAb,UAAU,CAACkB,WAAW,CAAClB,UAAU,CAACmB,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;EACxD;AACJ;AAEA,OAAO,SAASC,SAASA,CAAA,EAAG;EAC1B,MAAMC,aAAa,GAAGC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC;EACzD,IAAIF,aAAa,EAAE;IACjB,MAAMG,QAAQ,GAAGH,aAAa,CAACI,KAAK;IACpCC,KAAK,CAAE,GAAEF,QAAS,EAAC,CAAC;EACtB,CAAC,MAAM;IACLE,KAAK,CAAC,kBAAkB,CAAC;EAC3B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}