{"ast":null,"code":"import { request as defaultRequest } from \"@octokit/request\";\nimport { oauthRequest } from \"./utils\";\nasync function exchangeDeviceCode(options) {\n  const request = options.request || /* istanbul ignore next: we always pass a custom request in tests */\n  defaultRequest;\n  const response = await oauthRequest(request, \"POST /login/oauth/access_token\", {\n    client_id: options.clientId,\n    device_code: options.code,\n    grant_type: \"urn:ietf:params:oauth:grant-type:device_code\"\n  });\n  const authentication = {\n    clientType: options.clientType,\n    clientId: options.clientId,\n    token: response.data.access_token,\n    scopes: response.data.scope.split(/\\s+/).filter(Boolean)\n  };\n  if (\"clientSecret\" in options) {\n    authentication.clientSecret = options.clientSecret;\n  }\n  if (options.clientType === \"github-app\") {\n    if (\"refresh_token\" in response.data) {\n      const apiTimeInMs = new Date(response.headers.date).getTime();\n      authentication.refreshToken = response.data.refresh_token, authentication.expiresAt = toTimestamp(apiTimeInMs, response.data.expires_in), authentication.refreshTokenExpiresAt = toTimestamp(apiTimeInMs, response.data.refresh_token_expires_in);\n    }\n    delete authentication.scopes;\n  }\n  return {\n    ...response,\n    authentication\n  };\n}\nfunction toTimestamp(apiTimeInMs, expirationInSeconds) {\n  return new Date(apiTimeInMs + expirationInSeconds * 1e3).toISOString();\n}\nexport { exchangeDeviceCode };","map":{"version":3,"names":["request","defaultRequest","oauthRequest","exchangeDeviceCode","options","response","client_id","clientId","device_code","code","grant_type","authentication","clientType","token","data","access_token","scopes","scope","split","filter","Boolean","clientSecret","apiTimeInMs","Date","headers","date","getTime","refreshToken","refresh_token","expiresAt","toTimestamp","expires_in","refreshTokenExpiresAt","refresh_token_expires_in","expirationInSeconds","toISOString"],"sources":["C:/Users/Prateek/Desktop/College_Stuff/Fall_2023_Co-op_Semester/MakeUC/Find_your_repository/node_modules/@octokit/oauth-methods/dist-src/exchange-device-code.js"],"sourcesContent":["import { request as defaultRequest } from \"@octokit/request\";\nimport { oauthRequest } from \"./utils\";\nasync function exchangeDeviceCode(options) {\n  const request = options.request || /* istanbul ignore next: we always pass a custom request in tests */\n  defaultRequest;\n  const response = await oauthRequest(\n    request,\n    \"POST /login/oauth/access_token\",\n    {\n      client_id: options.clientId,\n      device_code: options.code,\n      grant_type: \"urn:ietf:params:oauth:grant-type:device_code\"\n    }\n  );\n  const authentication = {\n    clientType: options.clientType,\n    clientId: options.clientId,\n    token: response.data.access_token,\n    scopes: response.data.scope.split(/\\s+/).filter(Boolean)\n  };\n  if (\"clientSecret\" in options) {\n    authentication.clientSecret = options.clientSecret;\n  }\n  if (options.clientType === \"github-app\") {\n    if (\"refresh_token\" in response.data) {\n      const apiTimeInMs = new Date(response.headers.date).getTime();\n      authentication.refreshToken = response.data.refresh_token, authentication.expiresAt = toTimestamp(\n        apiTimeInMs,\n        response.data.expires_in\n      ), authentication.refreshTokenExpiresAt = toTimestamp(\n        apiTimeInMs,\n        response.data.refresh_token_expires_in\n      );\n    }\n    delete authentication.scopes;\n  }\n  return { ...response, authentication };\n}\nfunction toTimestamp(apiTimeInMs, expirationInSeconds) {\n  return new Date(apiTimeInMs + expirationInSeconds * 1e3).toISOString();\n}\nexport {\n  exchangeDeviceCode\n};\n"],"mappings":"AAAA,SAASA,OAAO,IAAIC,cAAc,QAAQ,kBAAkB;AAC5D,SAASC,YAAY,QAAQ,SAAS;AACtC,eAAeC,kBAAkBA,CAACC,OAAO,EAAE;EACzC,MAAMJ,OAAO,GAAGI,OAAO,CAACJ,OAAO,IAAI;EACnCC,cAAc;EACd,MAAMI,QAAQ,GAAG,MAAMH,YAAY,CACjCF,OAAO,EACP,gCAAgC,EAChC;IACEM,SAAS,EAAEF,OAAO,CAACG,QAAQ;IAC3BC,WAAW,EAAEJ,OAAO,CAACK,IAAI;IACzBC,UAAU,EAAE;EACd,CACF,CAAC;EACD,MAAMC,cAAc,GAAG;IACrBC,UAAU,EAAER,OAAO,CAACQ,UAAU;IAC9BL,QAAQ,EAAEH,OAAO,CAACG,QAAQ;IAC1BM,KAAK,EAAER,QAAQ,CAACS,IAAI,CAACC,YAAY;IACjCC,MAAM,EAAEX,QAAQ,CAACS,IAAI,CAACG,KAAK,CAACC,KAAK,CAAC,KAAK,CAAC,CAACC,MAAM,CAACC,OAAO;EACzD,CAAC;EACD,IAAI,cAAc,IAAIhB,OAAO,EAAE;IAC7BO,cAAc,CAACU,YAAY,GAAGjB,OAAO,CAACiB,YAAY;EACpD;EACA,IAAIjB,OAAO,CAACQ,UAAU,KAAK,YAAY,EAAE;IACvC,IAAI,eAAe,IAAIP,QAAQ,CAACS,IAAI,EAAE;MACpC,MAAMQ,WAAW,GAAG,IAAIC,IAAI,CAAClB,QAAQ,CAACmB,OAAO,CAACC,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC;MAC7Df,cAAc,CAACgB,YAAY,GAAGtB,QAAQ,CAACS,IAAI,CAACc,aAAa,EAAEjB,cAAc,CAACkB,SAAS,GAAGC,WAAW,CAC/FR,WAAW,EACXjB,QAAQ,CAACS,IAAI,CAACiB,UAChB,CAAC,EAAEpB,cAAc,CAACqB,qBAAqB,GAAGF,WAAW,CACnDR,WAAW,EACXjB,QAAQ,CAACS,IAAI,CAACmB,wBAChB,CAAC;IACH;IACA,OAAOtB,cAAc,CAACK,MAAM;EAC9B;EACA,OAAO;IAAE,GAAGX,QAAQ;IAAEM;EAAe,CAAC;AACxC;AACA,SAASmB,WAAWA,CAACR,WAAW,EAAEY,mBAAmB,EAAE;EACrD,OAAO,IAAIX,IAAI,CAACD,WAAW,GAAGY,mBAAmB,GAAG,GAAG,CAAC,CAACC,WAAW,CAAC,CAAC;AACxE;AACA,SACEhC,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}