{"ast":null,"code":"// runSearch.js\n\nimport { Octokit } from \"octokit\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\n\n// to set up  __dirname variable\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst responsesDir = path.join(__dirname, \"responses\"); // Define the responses directory path\n\n// Define the path to the auth key file\nconst authKeyFilePath = path.join(__dirname, \"../gh-api-authkey.txt\"); // Assuming the file is in the parent directory\n\n// Read the auth key from the file\nconst authKey = fs.readFileSync(authKeyFilePath, \"utf-8\").trim();\nconst octokit = new Octokit({\n  auth: authKey // Use the read key as the authentication token\n});\n\nasync function getResults() {\n  let start_date = new Date(\"01/01/2009\");\n  const current_date = new Date();\n  while (start_date < current_date) {\n    // Format the date as \"yyyy/mm/dd\"\n    let year = start_date.getFullYear();\n    let month = start_date.getMonth() + 1;\n    let day = start_date.getDate();\n    let from_date = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n    let end_date = new Date(start_date);\n    // Add 1 month to the end date\n    end_date.setFullYear(end_date.getFullYear() + 1);\n    // Subtract 1 day from the end date\n    end_date.setDate(end_date.getDate() - 1);\n    // if end date is greater than current date\n    if (end_date > current_date) {\n      end_date = current_date; // Set end_date to current_date\n    }\n    // Format the end_date\n    year = end_date.getFullYear();\n    month = end_date.getMonth() + 1;\n    day = end_date.getDate();\n    let to_date = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n    try {\n      // try to get response for request to search\n      let response = octokit.paginate.iterator(\"GET /search/repositories?q={query}+language:{language}+created:{from_date}..{to_date}\", {\n        query: \"ARM\",\n        language: \"Assembly\",\n        from_date: from_date,\n        to_date: to_date,\n        per_page: 100\n      });\n\n      // Create the responses directory if it doesn't exist\n      if (!fs.existsSync(responsesDir)) {\n        fs.mkdirSync(responsesDir);\n      }\n\n      // Write the response data to a JSON file\n      const responseFilePath = path.join(responsesDir, \"response.json\");\n      for await (const {\n        data\n      } of response) {\n        if (!fs.existsSync(responseFilePath)) {\n          // if file does not exist, create and write\n          fs.writeFileSync(responseFilePath, JSON.stringify(data, null, 2));\n        } else {\n          // else, append\n          fs.appendFileSync(responseFilePath, JSON.stringify(data, null, 2));\n        }\n        console.log(`Added ${data.length} repositories created between ${from_date} and ${to_date}`);\n      }\n    } catch (error) {\n      if (error.response) console.error(`Error: ${error.response.status}\\n Message: ${error.response.data.message}`);else console.error(error);\n    }\n    // Add 1 month to the start date\n    start_date.setFullYear(start_date.getFullYear() + 1);\n  }\n}\nexport function runSearch() {\n  const keywordsInput = document.getElementById(\"keywords\");\n  if (keywordsInput) {\n    const keywords = keywordsInput.value;\n    alert(`${keywords}`);\n  } else {\n    alert(\"Search executed!\");\n  }\n}","map":{"version":3,"names":["Octokit","fs","path","fileURLToPath","__filename","import","meta","url","__dirname","dirname","responsesDir","join","authKeyFilePath","authKey","readFileSync","trim","octokit","auth","getResults","start_date","Date","current_date","year","getFullYear","month","getMonth","day","getDate","from_date","String","padStart","end_date","setFullYear","setDate","to_date","response","paginate","iterator","query","language","per_page","existsSync","mkdirSync","responseFilePath","data","writeFileSync","JSON","stringify","appendFileSync","console","log","length","error","status","message","runSearch","keywordsInput","document","getElementById","keywords","value","alert"],"sources":["C:/Users/Prateek/Desktop/College_Stuff/Fall_2023_Co-op_Semester/MakeUC/Find_your_repository/repo_finder/src/utils/runSearch.js"],"sourcesContent":["// runSearch.js\r\n\r\nimport { Octokit } from \"octokit\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { fileURLToPath } from 'url';\r\n\r\n// to set up  __dirname variable\r\nconst __filename = fileURLToPath(import.meta.url);\r\n\r\nconst __dirname = path.dirname(__filename);\r\n\r\nconst responsesDir = path.join(__dirname, \"responses\"); // Define the responses directory path\r\n\r\n// Define the path to the auth key file\r\nconst authKeyFilePath = path.join(__dirname, \"../gh-api-authkey.txt\"); // Assuming the file is in the parent directory\r\n\r\n// Read the auth key from the file\r\nconst authKey = fs.readFileSync(authKeyFilePath, \"utf-8\").trim();\r\n\r\nconst octokit = new Octokit({\r\n    auth: authKey, // Use the read key as the authentication token\r\n});\r\n\r\nasync function getResults() {\r\n    let start_date = new Date(\"01/01/2009\")\r\n    const current_date = new Date()\r\n\r\n    while ( start_date < current_date) {\r\n        // Format the date as \"yyyy/mm/dd\"\r\n        let year = start_date.getFullYear();\r\n        let month = start_date.getMonth() + 1;\r\n        let day = start_date.getDate();\r\n        let from_date = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n\r\n        let end_date = new Date(start_date)\r\n        // Add 1 month to the end date\r\n        end_date.setFullYear(end_date.getFullYear() + 1);\r\n        // Subtract 1 day from the end date\r\n        end_date.setDate(end_date.getDate() - 1);\r\n        // if end date is greater than current date\r\n        if (end_date > current_date) {\r\n            end_date = current_date; // Set end_date to current_date\r\n        }\r\n        // Format the end_date\r\n        year = end_date.getFullYear();\r\n        month = end_date.getMonth() + 1;\r\n        day = end_date.getDate();\r\n        let to_date = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n\r\n        try {\r\n            // try to get response for request to search\r\n            let response = octokit.paginate.iterator(\"GET /search/repositories?q={query}+language:{language}+created:{from_date}..{to_date}\", {\r\n                query: \"ARM\",\r\n                language: \"Assembly\",\r\n                from_date: from_date,\r\n                to_date: to_date,\r\n                per_page: 100,\r\n            })\r\n\r\n            // Create the responses directory if it doesn't exist\r\n            if (!fs.existsSync(responsesDir)) {\r\n                fs.mkdirSync(responsesDir);\r\n            }\r\n\r\n            // Write the response data to a JSON file\r\n            const responseFilePath = path.join(responsesDir, \"response.json\");\r\n            for await (const {data} of response) {\r\n                if (!fs.existsSync(responseFilePath)) {\r\n                    // if file does not exist, create and write\r\n                    fs.writeFileSync(responseFilePath, JSON.stringify(data, null, 2));\r\n                } else {\r\n                    // else, append\r\n                    fs.appendFileSync(responseFilePath, JSON.stringify(data, null, 2));\r\n                }\r\n                console.log(`Added ${data.length} repositories created between ${from_date} and ${to_date}`)\r\n            }\r\n\r\n        } catch (error) {\r\n            if (error.response)\r\n                console.error(`Error: ${error.response.status}\\n Message: ${error.response.data.message}`)\r\n            else console.error(error)\r\n        }\r\n        // Add 1 month to the start date\r\n        start_date.setFullYear(start_date.getFullYear() + 1);\r\n    }\r\n}\r\n\r\nexport function runSearch() {\r\n  const keywordsInput = document.getElementById(\"keywords\");\r\n  if (keywordsInput) {\r\n    const keywords = keywordsInput.value;\r\n    alert(`${keywords}`);\r\n  } else {\r\n    alert(\"Search executed!\");\r\n  }\r\n}"],"mappings":"AAAA;;AAEA,SAASA,OAAO,QAAQ,SAAS;AACjC,OAAOC,EAAE,MAAM,IAAI;AACnB,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,aAAa,QAAQ,KAAK;;AAEnC;AACA,MAAMC,UAAU,GAAGD,aAAa,CAACE,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC;AAEjD,MAAMC,SAAS,GAAGN,IAAI,CAACO,OAAO,CAACL,UAAU,CAAC;AAE1C,MAAMM,YAAY,GAAGR,IAAI,CAACS,IAAI,CAACH,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC;;AAExD;AACA,MAAMI,eAAe,GAAGV,IAAI,CAACS,IAAI,CAACH,SAAS,EAAE,uBAAuB,CAAC,CAAC,CAAC;;AAEvE;AACA,MAAMK,OAAO,GAAGZ,EAAE,CAACa,YAAY,CAACF,eAAe,EAAE,OAAO,CAAC,CAACG,IAAI,CAAC,CAAC;AAEhE,MAAMC,OAAO,GAAG,IAAIhB,OAAO,CAAC;EACxBiB,IAAI,EAAEJ,OAAO,CAAE;AACnB,CAAC,CAAC;;AAEF,eAAeK,UAAUA,CAAA,EAAG;EACxB,IAAIC,UAAU,GAAG,IAAIC,IAAI,CAAC,YAAY,CAAC;EACvC,MAAMC,YAAY,GAAG,IAAID,IAAI,CAAC,CAAC;EAE/B,OAAQD,UAAU,GAAGE,YAAY,EAAE;IAC/B;IACA,IAAIC,IAAI,GAAGH,UAAU,CAACI,WAAW,CAAC,CAAC;IACnC,IAAIC,KAAK,GAAGL,UAAU,CAACM,QAAQ,CAAC,CAAC,GAAG,CAAC;IACrC,IAAIC,GAAG,GAAGP,UAAU,CAACQ,OAAO,CAAC,CAAC;IAC9B,IAAIC,SAAS,GAAI,GAAEN,IAAK,IAAGO,MAAM,CAACL,KAAK,CAAC,CAACM,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACH,GAAG,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;IAE3F,IAAIC,QAAQ,GAAG,IAAIX,IAAI,CAACD,UAAU,CAAC;IACnC;IACAY,QAAQ,CAACC,WAAW,CAACD,QAAQ,CAACR,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;IAChD;IACAQ,QAAQ,CAACE,OAAO,CAACF,QAAQ,CAACJ,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IACxC;IACA,IAAII,QAAQ,GAAGV,YAAY,EAAE;MACzBU,QAAQ,GAAGV,YAAY,CAAC,CAAC;IAC7B;IACA;IACAC,IAAI,GAAGS,QAAQ,CAACR,WAAW,CAAC,CAAC;IAC7BC,KAAK,GAAGO,QAAQ,CAACN,QAAQ,CAAC,CAAC,GAAG,CAAC;IAC/BC,GAAG,GAAGK,QAAQ,CAACJ,OAAO,CAAC,CAAC;IACxB,IAAIO,OAAO,GAAI,GAAEZ,IAAK,IAAGO,MAAM,CAACL,KAAK,CAAC,CAACM,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACH,GAAG,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;IAEzF,IAAI;MACA;MACA,IAAIK,QAAQ,GAAGnB,OAAO,CAACoB,QAAQ,CAACC,QAAQ,CAAC,uFAAuF,EAAE;QAC9HC,KAAK,EAAE,KAAK;QACZC,QAAQ,EAAE,UAAU;QACpBX,SAAS,EAAEA,SAAS;QACpBM,OAAO,EAAEA,OAAO;QAChBM,QAAQ,EAAE;MACd,CAAC,CAAC;;MAEF;MACA,IAAI,CAACvC,EAAE,CAACwC,UAAU,CAAC/B,YAAY,CAAC,EAAE;QAC9BT,EAAE,CAACyC,SAAS,CAAChC,YAAY,CAAC;MAC9B;;MAEA;MACA,MAAMiC,gBAAgB,GAAGzC,IAAI,CAACS,IAAI,CAACD,YAAY,EAAE,eAAe,CAAC;MACjE,WAAW,MAAM;QAACkC;MAAI,CAAC,IAAIT,QAAQ,EAAE;QACjC,IAAI,CAAClC,EAAE,CAACwC,UAAU,CAACE,gBAAgB,CAAC,EAAE;UAClC;UACA1C,EAAE,CAAC4C,aAAa,CAACF,gBAAgB,EAAEG,IAAI,CAACC,SAAS,CAACH,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QACrE,CAAC,MAAM;UACH;UACA3C,EAAE,CAAC+C,cAAc,CAACL,gBAAgB,EAAEG,IAAI,CAACC,SAAS,CAACH,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QACtE;QACAK,OAAO,CAACC,GAAG,CAAE,SAAQN,IAAI,CAACO,MAAO,iCAAgCvB,SAAU,QAAOM,OAAQ,EAAC,CAAC;MAChG;IAEJ,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACZ,IAAIA,KAAK,CAACjB,QAAQ,EACdc,OAAO,CAACG,KAAK,CAAE,UAASA,KAAK,CAACjB,QAAQ,CAACkB,MAAO,eAAcD,KAAK,CAACjB,QAAQ,CAACS,IAAI,CAACU,OAAQ,EAAC,CAAC,MACzFL,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;IAC7B;IACA;IACAjC,UAAU,CAACa,WAAW,CAACb,UAAU,CAACI,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;EACxD;AACJ;AAEA,OAAO,SAASgC,SAASA,CAAA,EAAG;EAC1B,MAAMC,aAAa,GAAGC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC;EACzD,IAAIF,aAAa,EAAE;IACjB,MAAMG,QAAQ,GAAGH,aAAa,CAACI,KAAK;IACpCC,KAAK,CAAE,GAAEF,QAAS,EAAC,CAAC;EACtB,CAAC,MAAM;IACLE,KAAK,CAAC,kBAAkB,CAAC;EAC3B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}