{"ast":null,"code":"// pkg/dist-src/types.js\nvar Algorithm = /* @__PURE__ */(Algorithm2 => {\n  Algorithm2[\"SHA1\"] = \"sha1\";\n  Algorithm2[\"SHA256\"] = \"sha256\";\n  return Algorithm2;\n})(Algorithm || {});\n\n// pkg/dist-src/utils.js\nvar getAlgorithm = signature => {\n  return signature.startsWith(\"sha256=\") ? \"sha256\" : \"sha1\";\n};\n\n// pkg/dist-src/web.js\nvar enc = new TextEncoder();\nfunction hexToUInt8Array(string) {\n  const pairs = string.match(/[\\dA-F]{2}/gi);\n  const integers = pairs.map(function (s) {\n    return parseInt(s, 16);\n  });\n  return new Uint8Array(integers);\n}\nfunction UInt8ArrayToHex(signature) {\n  return Array.prototype.map.call(new Uint8Array(signature), x => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\nfunction getHMACHashName(algorithm) {\n  return {\n    [Algorithm.SHA1]: \"SHA-1\",\n    [Algorithm.SHA256]: \"SHA-256\"\n  }[algorithm];\n}\nasync function importKey(secret, algorithm) {\n  return crypto.subtle.importKey(\"raw\",\n  // raw format of the key - should be Uint8Array\n  enc.encode(secret), {\n    // algorithm details\n    name: \"HMAC\",\n    hash: {\n      name: getHMACHashName(algorithm)\n    }\n  }, false,\n  // export = false\n  [\"sign\", \"verify\"]\n  // what this key can do\n  );\n}\n\nasync function sign(options, payload) {\n  const {\n    secret,\n    algorithm\n  } = typeof options === \"object\" ? {\n    secret: options.secret,\n    algorithm: options.algorithm || Algorithm.SHA256\n  } : {\n    secret: options,\n    algorithm: Algorithm.SHA256\n  };\n  if (!secret || !payload) {\n    throw new TypeError(\"[@octokit/webhooks-methods] secret & payload required for sign()\");\n  }\n  if (!Object.values(Algorithm).includes(algorithm)) {\n    throw new TypeError(`[@octokit/webhooks] Algorithm ${algorithm} is not supported. Must be  'sha1' or 'sha256'`);\n  }\n  const signature = await crypto.subtle.sign(\"HMAC\", await importKey(secret, algorithm), enc.encode(payload));\n  return `${algorithm}=${UInt8ArrayToHex(signature)}`;\n}\nasync function verify(secret, eventPayload, signature) {\n  if (!secret || !eventPayload || !signature) {\n    throw new TypeError(\"[@octokit/webhooks-methods] secret, eventPayload & signature required\");\n  }\n  const algorithm = getAlgorithm(signature);\n  return await crypto.subtle.verify(\"HMAC\", await importKey(secret, algorithm), hexToUInt8Array(signature.replace(`${algorithm}=`, \"\")), enc.encode(eventPayload));\n}\nexport { sign, verify };","map":{"version":3,"names":["Algorithm","Algorithm2","getAlgorithm","signature","startsWith","enc","TextEncoder","hexToUInt8Array","string","pairs","match","integers","map","s","parseInt","Uint8Array","UInt8ArrayToHex","Array","prototype","call","x","toString","padStart","join","getHMACHashName","algorithm","SHA1","SHA256","importKey","secret","crypto","subtle","encode","name","hash","sign","options","payload","TypeError","Object","values","includes","verify","eventPayload","replace"],"sources":["C:/Users/Prateek/Desktop/College_Stuff/Fall_2023_Co-op_Semester/MakeUC/Find_your_repository/node_modules/@octokit/webhooks-methods/dist-web/index.js"],"sourcesContent":["// pkg/dist-src/types.js\nvar Algorithm = /* @__PURE__ */ ((Algorithm2) => {\n  Algorithm2[\"SHA1\"] = \"sha1\";\n  Algorithm2[\"SHA256\"] = \"sha256\";\n  return Algorithm2;\n})(Algorithm || {});\n\n// pkg/dist-src/utils.js\nvar getAlgorithm = (signature) => {\n  return signature.startsWith(\"sha256=\") ? \"sha256\" : \"sha1\";\n};\n\n// pkg/dist-src/web.js\nvar enc = new TextEncoder();\nfunction hexToUInt8Array(string) {\n  const pairs = string.match(/[\\dA-F]{2}/gi);\n  const integers = pairs.map(function(s) {\n    return parseInt(s, 16);\n  });\n  return new Uint8Array(integers);\n}\nfunction UInt8ArrayToHex(signature) {\n  return Array.prototype.map.call(new Uint8Array(signature), (x) => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\nfunction getHMACHashName(algorithm) {\n  return {\n    [Algorithm.SHA1]: \"SHA-1\",\n    [Algorithm.SHA256]: \"SHA-256\"\n  }[algorithm];\n}\nasync function importKey(secret, algorithm) {\n  return crypto.subtle.importKey(\n    \"raw\",\n    // raw format of the key - should be Uint8Array\n    enc.encode(secret),\n    {\n      // algorithm details\n      name: \"HMAC\",\n      hash: { name: getHMACHashName(algorithm) }\n    },\n    false,\n    // export = false\n    [\"sign\", \"verify\"]\n    // what this key can do\n  );\n}\nasync function sign(options, payload) {\n  const { secret, algorithm } = typeof options === \"object\" ? {\n    secret: options.secret,\n    algorithm: options.algorithm || Algorithm.SHA256\n  } : { secret: options, algorithm: Algorithm.SHA256 };\n  if (!secret || !payload) {\n    throw new TypeError(\n      \"[@octokit/webhooks-methods] secret & payload required for sign()\"\n    );\n  }\n  if (!Object.values(Algorithm).includes(algorithm)) {\n    throw new TypeError(\n      `[@octokit/webhooks] Algorithm ${algorithm} is not supported. Must be  'sha1' or 'sha256'`\n    );\n  }\n  const signature = await crypto.subtle.sign(\n    \"HMAC\",\n    await importKey(secret, algorithm),\n    enc.encode(payload)\n  );\n  return `${algorithm}=${UInt8ArrayToHex(signature)}`;\n}\nasync function verify(secret, eventPayload, signature) {\n  if (!secret || !eventPayload || !signature) {\n    throw new TypeError(\n      \"[@octokit/webhooks-methods] secret, eventPayload & signature required\"\n    );\n  }\n  const algorithm = getAlgorithm(signature);\n  return await crypto.subtle.verify(\n    \"HMAC\",\n    await importKey(secret, algorithm),\n    hexToUInt8Array(signature.replace(`${algorithm}=`, \"\")),\n    enc.encode(eventPayload)\n  );\n}\nexport {\n  sign,\n  verify\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}