{"ast":null,"code":"// runSearch.js\n\nimport { Octokit } from \"octokit\";\nconst authKey = \"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\";\nconst octokit = new Octokit({\n  auth: authKey // Use the read key as the authentication token\n});\n\nasync function getResults() {\n  try {\n    // try to get response for request to search\n    let response = await octokit.request(\"GET /search/repositories?q={query}+language:{language}+created:{from_date}..{to_date}\", {\n      query: \"ARM\",\n      language: \"Assembly\",\n      per_page: 10\n    });\n\n    // Create the responses directory if it doesn't exist\n    if (!localStorage.responses) {\n      localStorage.responses = JSON.stringify([response]);\n    } else {\n      // else, append\n      const responses = JSON.parse(localStorage.responses);\n      responses.push(response);\n      localStorage.responses = JSON.stringify(responses);\n    }\n  } catch (error) {\n    if (error.response) console.error(`Error: ${error.response.status}\\n Message: ${error.response.data.message}`);else console.error(error);\n  }\n}\nexport function runSearch() {\n  const query = document.getElementById(\"query\");\n  const owner = document.getElementById(\"owner\");\n  const stars = document.getElementById(\"stars\");\n  const lastUpdated = document.getElementById(\"last-updated\");\n  const checkboxes = document.querySelectorAll(\"#languages input[type='checkbox']\");\n\n  // Concatenate the values into a single string\n  const alertMessage = `Query: ${query.value}\\nOwner: ${owner.value}\\nStars: ${stars.value}\\nLast Updated: ${lastUpdated.value}\\nLanguages: ${languages.value}`;\n\n  // Display the concatenated string in an alert\n  alert(alertMessage);\n}","map":{"version":3,"names":["Octokit","authKey","octokit","auth","getResults","response","request","query","language","per_page","localStorage","responses","JSON","stringify","parse","push","error","console","status","data","message","runSearch","document","getElementById","owner","stars","lastUpdated","checkboxes","querySelectorAll","alertMessage","value","languages","alert"],"sources":["C:/Users/Prateek/Desktop/College_Stuff/Fall_2023_Co-op_Semester/MakeUC/Find_your_repository/repo_finder/src/utils/runSearch.js"],"sourcesContent":["// runSearch.js\r\n\r\nimport { Octokit } from \"octokit\";\r\n\r\nconst authKey = \"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\"\r\n\r\nconst octokit = new Octokit({\r\n    auth: authKey, // Use the read key as the authentication token\r\n});\r\n\r\nasync function getResults() {\r\n\r\n    try {\r\n        // try to get response for request to search\r\n        let response = await octokit.request(\"GET /search/repositories?q={query}+language:{language}+created:{from_date}..{to_date}\", {\r\n            query: \"ARM\",\r\n            language: \"Assembly\",\r\n            per_page: 10,\r\n        })\r\n\r\n        // Create the responses directory if it doesn't exist\r\n        if (!localStorage.responses) {\r\n            localStorage.responses = JSON.stringify([response]);\r\n\r\n        } else { // else, append\r\n            const responses = JSON.parse(localStorage.responses);\r\n            responses.push(response);\r\n            localStorage.responses = JSON.stringify(responses);\r\n        }\r\n\r\n    } catch (error) {\r\n        if (error.response)\r\n            console.error(`Error: ${error.response.status}\\n Message: ${error.response.data.message}`)\r\n        else console.error(error)\r\n    }\r\n}\r\n\r\nexport function runSearch() {\r\n    const query = document.getElementById(\"query\");\r\n    const owner = document.getElementById(\"owner\");\r\n    const stars = document.getElementById(\"stars\");\r\n    const lastUpdated = document.getElementById(\"last-updated\");\r\n    const checkboxes = document.querySelectorAll(\"#languages input[type='checkbox']\");\r\n\r\n    // Concatenate the values into a single string\r\n    const alertMessage = `Query: ${query.value}\\nOwner: ${owner.value}\\nStars: ${stars.value}\\nLast Updated: ${lastUpdated.value}\\nLanguages: ${languages.value}`;\r\n\r\n    // Display the concatenated string in an alert\r\n    alert(alertMessage);\r\n}\r\n"],"mappings":"AAAA;;AAEA,SAASA,OAAO,QAAQ,SAAS;AAEjC,MAAMC,OAAO,GAAG,0CAA0C;AAE1D,MAAMC,OAAO,GAAG,IAAIF,OAAO,CAAC;EACxBG,IAAI,EAAEF,OAAO,CAAE;AACnB,CAAC,CAAC;;AAEF,eAAeG,UAAUA,CAAA,EAAG;EAExB,IAAI;IACA;IACA,IAAIC,QAAQ,GAAG,MAAMH,OAAO,CAACI,OAAO,CAAC,uFAAuF,EAAE;MAC1HC,KAAK,EAAE,KAAK;MACZC,QAAQ,EAAE,UAAU;MACpBC,QAAQ,EAAE;IACd,CAAC,CAAC;;IAEF;IACA,IAAI,CAACC,YAAY,CAACC,SAAS,EAAE;MACzBD,YAAY,CAACC,SAAS,GAAGC,IAAI,CAACC,SAAS,CAAC,CAACR,QAAQ,CAAC,CAAC;IAEvD,CAAC,MAAM;MAAE;MACL,MAAMM,SAAS,GAAGC,IAAI,CAACE,KAAK,CAACJ,YAAY,CAACC,SAAS,CAAC;MACpDA,SAAS,CAACI,IAAI,CAACV,QAAQ,CAAC;MACxBK,YAAY,CAACC,SAAS,GAAGC,IAAI,CAACC,SAAS,CAACF,SAAS,CAAC;IACtD;EAEJ,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZ,IAAIA,KAAK,CAACX,QAAQ,EACdY,OAAO,CAACD,KAAK,CAAE,UAASA,KAAK,CAACX,QAAQ,CAACa,MAAO,eAAcF,KAAK,CAACX,QAAQ,CAACc,IAAI,CAACC,OAAQ,EAAC,CAAC,MACzFH,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EAC7B;AACJ;AAEA,OAAO,SAASK,SAASA,CAAA,EAAG;EACxB,MAAMd,KAAK,GAAGe,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;EAC9C,MAAMC,KAAK,GAAGF,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;EAC9C,MAAME,KAAK,GAAGH,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;EAC9C,MAAMG,WAAW,GAAGJ,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC;EAC3D,MAAMI,UAAU,GAAGL,QAAQ,CAACM,gBAAgB,CAAC,mCAAmC,CAAC;;EAEjF;EACA,MAAMC,YAAY,GAAI,UAAStB,KAAK,CAACuB,KAAM,YAAWN,KAAK,CAACM,KAAM,YAAWL,KAAK,CAACK,KAAM,mBAAkBJ,WAAW,CAACI,KAAM,gBAAeC,SAAS,CAACD,KAAM,EAAC;;EAE7J;EACAE,KAAK,CAACH,YAAY,CAAC;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}